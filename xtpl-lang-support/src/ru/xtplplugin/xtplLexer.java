/* The following code was generated by JFlex 1.4.3 on 12/9/13 5:52 PM */

package ru.xtplplugin;
 
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.xtplplugin.psi.xtplToken;
import com.intellij.psi.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/9/13 5:52 PM from the specification file
 * <tt>/git/xtpl-lang-support/src/ru/xtplplugin/xtpl.flex</tt>
 */
class xtplLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYNODE_CLASS = 4;
  public static final int YYEXPR_VALUE_SQ = 14;
  public static final int YYXATTR_NAME = 10;
  public static final int YYDECL = 18;
  public static final int YYEXPR = 12;
  public static final int YYEXPR_VALUE_DQ = 16;
  public static final int YY_DQ_STRING = 22;
  public static final int YYNODE_NAME = 2;
  public static final int YY_SCRIPT = 24;
  public static final int YYPROP = 20;
  public static final int YYINITIAL = 0;
  public static final int YYATTR_NAME = 8;
  public static final int YYNODE_ATTR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     6,  6,  7,  7,  6,  6,  8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\1\0\1\3\1\4\22\0\1\60\1\53\1\11"+
    "\1\35\1\37\1\53\1\41\1\10\1\61\1\62\1\53\1\33\1\6"+
    "\1\31\1\32\1\54\1\25\11\2\1\36\1\71\1\53\1\67\1\55"+
    "\1\53\1\57\6\30\21\40\1\27\2\40\1\66\1\7\1\70\1\0"+
    "\1\34\1\63\1\17\1\64\1\44\1\23\1\15\1\16\1\65\1\47"+
    "\1\24\2\65\1\20\1\65\1\22\1\45\1\51\1\65\1\13\1\21"+
    "\1\12\1\14\1\52\1\46\1\26\1\50\1\65\1\42\1\56\1\43"+
    "\1\53\53\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0"+
    "\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1\16\0\5\1\11\0"+
    "\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0\202\1\10\0"+
    "\105\1\1\0\46\1\2\0\2\1\6\0\20\1\41\0\46\1\2\0"+
    "\1\1\7\0\47\1\110\0\33\1\5\0\3\1\56\0\32\1\5\0"+
    "\13\1\43\0\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0"+
    "\2\1\12\0\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0"+
    "\3\1\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0\1\1\22\0"+
    "\1\1\7\0\12\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0\2\1\1\0"+
    "\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1\1\0"+
    "\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0\20\1\46\0"+
    "\2\1\43\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0"+
    "\2\1\42\0\1\1\77\0\10\1\1\0\42\1\35\0\4\1\164\0"+
    "\42\1\1\0\5\1\1\0\2\1\45\0\6\1\112\0\46\1\12\0"+
    "\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0\7\1\1\0"+
    "\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0\37\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\1\0\47\1\1\0\23\1\105\0\125\1\14\0"+
    "\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0\15\1\1\0"+
    "\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1\17\0"+
    "\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0\51\1\127\0"+
    "\35\1\63\0\36\1\2\0\5\1\u038b\0\154\1\224\0\234\1\4\0"+
    "\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0"+
    "\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\164\0"+
    "\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0\12\1\1\0"+
    "\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0\5\1\u0ebb\0"+
    "\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0"+
    "\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0\30\1\70\0"+
    "\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0"+
    "\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0\1\1\1\0"+
    "\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0"+
    "\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0\32\1\13\0"+
    "\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\7\0\1\2\1\0\1\1\1\3\1\4\1\1"+
    "\6\3\1\5\1\6\1\7\1\1\1\10\1\11\1\3"+
    "\1\1\1\12\1\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\7\1\1\1\25"+
    "\1\26\1\4\1\27\1\30\1\31\1\32\1\33\6\34"+
    "\1\31\2\35\1\36\2\34\1\35\1\37\1\40\1\41"+
    "\1\42\1\43\1\2\1\7\1\44\1\45\1\46\1\0"+
    "\2\1\1\47\1\1\4\3\1\50\2\3\1\51\1\1"+
    "\1\3\2\1\1\2\2\0\5\34\1\52\1\0\2\34"+
    "\1\35\1\0\1\1\5\3\2\51\1\3\1\53\1\31"+
    "\1\0\1\31\5\34\1\31\1\17\1\34\1\1\1\52"+
    "\3\3\1\0\1\1\1\54\1\51\1\55\2\34\3\3"+
    "\2\34\1\3\3\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u0488\0\u0488\0\u04c2"+
    "\0\u0244\0\u0244\0\u04fc\0\u0536\0\u0488\0\u0570\0\u05aa\0\u0244"+
    "\0\u05e4\0\u0488\0\u061e\0\u0488\0\u0658\0\u0692\0\u0488\0\u06cc"+
    "\0\u0706\0\u0488\0\u0488\0\u0488\0\u0740\0\u0488\0\u0488\0\u077a"+
    "\0\u0488\0\u0488\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u0488\0\u09be\0\u09f8\0\u0a32\0\u0488"+
    "\0\u0488\0\u0488\0\u0488\0\u0488\0\u0a6c\0\u0aa6\0\u0488\0\u0488"+
    "\0\u0488\0\u0ae0\0\u0b1a\0\u0b54\0\u0488\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u027e\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0570\0\u0706\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u07ee\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u0aa6"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u0244"+
    "\0\u1220\0\u0dd2\0\u125a\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u0fa2\0\u07ee\0\u13f0\0\u142a\0\u027e\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u0488\0\u0488\0\u07ee\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\13\3\15\2\13\2\16\3\14\1\17"+
    "\1\20\2\14\1\21\1\14\1\22\1\23\1\13\1\24"+
    "\2\14\1\13\1\25\2\13\1\26\1\27\1\13\1\14"+
    "\1\30\1\31\1\32\1\33\6\14\1\13\1\34\1\35"+
    "\1\36\1\37\1\15\2\40\1\41\2\14\1\27\3\13"+
    "\3\27\3\15\24\27\1\42\2\27\1\43\22\27\1\15"+
    "\5\27\1\44\4\27\1\45\1\27\3\46\4\27\13\45"+
    "\1\27\3\45\1\27\1\47\1\27\1\45\3\27\1\45"+
    "\3\27\7\45\5\27\1\46\3\27\2\45\1\44\4\27"+
    "\1\50\7\27\1\51\13\50\1\27\3\50\7\27\1\50"+
    "\3\27\7\50\11\27\2\50\1\27\1\52\1\53\1\27"+
    "\3\54\1\55\32\54\1\56\3\54\1\57\15\54\1\55"+
    "\11\54\2\27\1\60\1\55\3\61\2\27\1\62\1\63"+
    "\1\64\1\65\1\64\1\66\3\64\1\67\1\64\1\70"+
    "\1\71\3\64\1\72\1\47\1\73\1\64\1\27\1\73"+
    "\2\64\1\73\2\74\1\75\5\64\1\76\1\73\1\77"+
    "\2\73\1\27\1\55\1\100\1\101\1\27\2\64\1\102"+
    "\1\73\1\102\1\35\72\27\3\54\1\55\36\54\1\103"+
    "\15\54\1\55\6\54\1\104\2\54\4\105\2\27\1\105"+
    "\1\106\1\105\1\107\60\105\63\110\1\111\6\110\3\13"+
    "\3\0\24\13\1\0\2\13\2\0\16\13\4\0\5\13"+
    "\1\0\4\13\2\14\1\112\2\0\2\13\2\113\20\14"+
    "\1\0\1\13\1\114\1\0\1\115\1\13\1\14\3\13"+
    "\7\14\2\13\3\0\1\112\3\13\2\14\1\0\3\13"+
    "\3\0\3\15\52\0\1\15\11\0\1\13\1\114\1\13"+
    "\3\0\4\13\13\114\1\13\1\116\2\114\1\13\1\0"+
    "\2\13\2\0\1\13\1\114\3\13\7\114\2\13\4\0"+
    "\3\13\2\114\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\6\14\1\117\11\14\1\0\1\13\1\114\1\0"+
    "\1\115\1\13\1\14\3\13\7\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\20\14\1\0\1\13\1\114\1\0\1\115\1\13"+
    "\1\14\3\13\1\14\1\120\5\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\20\14\1\0\1\13\1\114\1\0\1\115\1\13"+
    "\1\14\3\13\2\14\1\121\4\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\3\14\1\122\14\14\1\0\1\13\1\114\1\0"+
    "\1\115\1\13\1\14\3\13\7\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\4\14\1\123\3\14\1\124\7\14\1\0\1\13"+
    "\1\114\1\0\1\115\1\13\1\14\3\13\7\14\2\13"+
    "\3\0\1\112\3\13\2\14\1\0\4\13\2\14\1\112"+
    "\2\0\2\13\2\113\17\14\1\125\1\0\1\13\1\114"+
    "\1\0\1\115\1\13\1\14\3\13\7\14\2\13\3\0"+
    "\1\112\3\13\2\14\1\0\3\13\72\0\1\13\1\126"+
    "\1\13\3\0\4\13\13\126\1\13\3\126\1\13\1\0"+
    "\2\13\2\0\1\13\1\126\1\13\1\127\1\13\7\126"+
    "\2\13\4\0\3\13\2\126\1\0\4\13\2\14\1\112"+
    "\2\0\2\13\2\113\5\14\1\130\12\14\1\0\1\13"+
    "\1\114\1\0\1\115\1\13\1\14\3\13\7\14\2\13"+
    "\3\0\1\112\3\13\2\14\1\0\6\13\3\0\24\13"+
    "\1\0\2\13\2\0\15\13\1\131\4\0\5\13\1\0"+
    "\3\13\5\132\1\0\64\132\60\37\1\0\11\37\2\13"+
    "\1\41\3\0\4\13\15\41\3\13\1\0\2\13\2\0"+
    "\5\13\7\41\2\13\4\0\3\13\2\41\1\0\3\13"+
    "\1\0\1\43\10\0\13\43\1\0\4\43\2\0\1\43"+
    "\3\0\1\43\3\0\7\43\11\0\2\43\5\0\2\45"+
    "\7\0\20\45\2\0\1\45\3\0\1\45\3\0\7\45"+
    "\11\0\2\45\7\0\3\46\52\0\1\46\12\0\2\50"+
    "\7\0\20\50\2\0\1\50\3\0\1\50\3\0\7\50"+
    "\11\0\2\50\4\0\70\133\1\0\1\133\3\0\1\55"+
    "\54\0\1\55\13\0\1\60\12\0\1\134\7\0\1\60"+
    "\4\0\1\135\41\0\1\64\7\0\1\64\1\136\15\64"+
    "\3\0\1\64\2\0\2\64\3\0\4\64\1\137\2\64"+
    "\11\0\2\64\6\0\1\64\7\0\17\64\3\0\1\64"+
    "\2\0\2\64\3\0\7\64\11\0\2\64\6\0\1\64"+
    "\7\0\10\64\1\140\6\64\3\0\1\64\2\0\2\64"+
    "\3\0\7\64\11\0\2\64\6\0\1\64\7\0\5\64"+
    "\1\141\11\64\3\0\1\64\2\0\2\64\3\0\7\64"+
    "\11\0\2\64\6\0\1\64\7\0\2\64\1\142\14\64"+
    "\3\0\1\64\2\0\2\64\3\0\7\64\11\0\2\64"+
    "\6\0\1\64\7\0\10\64\1\143\6\64\3\0\1\64"+
    "\2\0\2\64\3\0\7\64\11\0\2\64\6\0\1\60"+
    "\12\0\1\134\7\0\1\60\2\144\2\0\1\135\41\0"+
    "\1\60\22\0\1\60\3\0\1\73\1\0\1\73\2\0"+
    "\1\73\2\0\1\73\11\0\4\73\10\0\1\73\33\0"+
    "\1\73\1\0\1\73\2\0\1\73\2\0\1\73\11\0"+
    "\4\73\10\0\1\73\4\0\1\64\7\0\1\145\16\64"+
    "\3\0\1\64\2\0\2\64\3\0\7\64\11\0\2\64"+
    "\6\0\1\64\7\0\17\64\3\0\1\64\2\0\2\64"+
    "\3\0\1\64\1\146\5\64\11\0\2\64\35\0\1\73"+
    "\1\0\1\73\2\0\1\73\2\0\1\73\11\0\1\73"+
    "\1\147\2\73\10\0\1\73\2\0\4\105\2\0\1\105"+
    "\1\150\1\105\1\0\64\105\2\0\64\105\3\0\1\112"+
    "\32\0\1\115\21\0\1\112\11\0\3\13\1\112\2\0"+
    "\24\13\1\0\2\13\1\0\1\115\16\13\3\0\1\112"+
    "\5\13\1\0\4\13\2\114\1\112\2\0\2\13\2\113"+
    "\20\114\1\0\1\13\1\114\1\0\1\115\1\13\1\114"+
    "\3\13\7\114\2\13\3\0\1\112\3\13\2\114\1\0"+
    "\4\13\2\114\1\112\2\0\2\13\2\113\17\114\1\151"+
    "\1\0\1\13\1\114\1\0\1\115\1\13\1\114\3\13"+
    "\7\114\2\13\3\0\1\112\3\13\2\114\1\0\4\13"+
    "\2\14\1\112\2\0\2\13\2\113\7\14\1\152\10\14"+
    "\1\0\1\13\1\114\1\0\1\115\1\13\1\14\3\13"+
    "\7\14\2\13\3\0\1\112\3\13\2\14\1\0\4\13"+
    "\2\14\1\112\2\0\2\13\2\113\1\14\1\123\16\14"+
    "\1\0\1\13\1\114\1\0\1\115\1\13\1\14\3\13"+
    "\7\14\2\13\3\0\1\112\3\13\2\14\1\0\4\13"+
    "\2\14\1\112\2\0\2\13\2\113\12\14\1\153\5\14"+
    "\1\0\1\13\1\114\1\0\1\115\1\13\1\14\3\13"+
    "\7\14\2\13\3\0\1\112\3\13\2\14\1\0\4\13"+
    "\2\14\1\112\2\0\2\13\2\113\4\14\1\154\13\14"+
    "\1\0\1\13\1\114\1\0\1\115\1\13\1\14\3\13"+
    "\7\14\2\13\3\0\1\112\3\13\2\14\1\0\4\13"+
    "\2\14\1\112\2\0\2\13\2\113\20\14\1\0\1\13"+
    "\1\114\1\0\1\115\1\13\1\14\3\13\1\155\6\14"+
    "\2\13\3\0\1\112\3\13\2\14\1\0\4\13\1\156"+
    "\1\14\1\112\2\0\2\13\2\113\13\156\1\14\3\156"+
    "\1\14\1\0\1\13\1\114\1\0\1\115\1\13\1\156"+
    "\3\13\7\156\2\13\3\0\1\112\3\13\2\156\1\0"+
    "\4\13\2\126\3\0\4\13\20\126\1\157\1\13\1\126"+
    "\2\0\1\13\1\126\2\13\1\160\7\126\2\13\4\0"+
    "\3\13\2\126\1\0\4\13\1\126\1\13\3\0\4\13"+
    "\13\126\1\13\3\126\1\13\1\0\2\13\2\0\1\13"+
    "\1\126\3\13\7\126\2\13\4\0\3\13\2\126\1\0"+
    "\4\13\2\14\1\112\2\0\2\13\2\113\7\14\1\161"+
    "\10\14\1\0\1\13\1\114\1\0\1\115\1\13\1\14"+
    "\3\13\7\14\2\13\3\0\1\112\3\13\2\14\1\0"+
    "\3\13\5\162\1\0\64\162\2\0\1\163\22\0\1\163"+
    "\3\0\1\164\1\0\1\164\40\0\1\165\22\0\1\165"+
    "\46\0\1\64\7\0\2\64\1\166\14\64\3\0\1\64"+
    "\2\0\2\64\3\0\7\64\11\0\2\64\6\0\1\64"+
    "\7\0\17\64\3\0\1\64\2\0\2\64\3\0\5\64"+
    "\1\167\1\64\11\0\2\64\6\0\1\64\7\0\11\64"+
    "\1\170\5\64\3\0\1\64\2\0\2\64\3\0\7\64"+
    "\11\0\2\64\6\0\1\64\7\0\6\64\1\171\10\64"+
    "\3\0\1\64\2\0\2\64\3\0\7\64\11\0\2\64"+
    "\6\0\1\64\7\0\6\64\1\172\10\64\3\0\1\64"+
    "\2\0\2\64\3\0\7\64\11\0\2\64\6\0\1\173"+
    "\12\0\3\173\3\0\1\173\1\0\1\173\2\0\1\173"+
    "\13\0\1\173\17\0\1\173\7\0\1\64\7\0\14\64"+
    "\1\174\2\64\3\0\1\64\2\0\2\64\3\0\7\64"+
    "\11\0\2\64\6\0\1\64\7\0\12\64\1\175\4\64"+
    "\3\0\1\64\2\0\2\64\3\0\7\64\11\0\2\64"+
    "\4\0\5\162\1\0\23\162\1\147\1\162\1\147\2\162"+
    "\1\147\2\162\1\147\11\162\4\147\10\162\1\147\2\162"+
    "\1\13\1\176\1\114\1\112\2\0\2\13\2\113\13\176"+
    "\1\114\3\176\1\114\1\0\1\13\1\114\1\0\1\115"+
    "\1\13\1\176\3\13\7\176\2\13\3\0\1\112\3\13"+
    "\2\176\1\0\4\13\2\14\1\112\2\0\2\13\2\113"+
    "\3\14\1\177\14\14\1\0\1\13\1\114\1\0\1\115"+
    "\1\13\1\14\3\13\7\14\2\13\3\0\1\112\3\13"+
    "\2\14\1\0\4\13\2\14\1\112\2\0\2\13\2\113"+
    "\1\200\17\14\1\0\1\13\1\114\1\0\1\115\1\13"+
    "\1\14\3\13\7\14\2\13\3\0\1\112\3\13\2\14"+
    "\1\0\4\13\2\14\1\112\2\0\2\13\2\113\5\14"+
    "\1\201\12\14\1\0\1\13\1\114\1\0\1\115\1\13"+
    "\1\14\3\13\7\14\2\13\3\0\1\112\3\13\2\14"+
    "\1\0\4\13\2\14\1\112\2\0\2\13\2\113\6\14"+
    "\1\202\11\14\1\0\1\13\1\114\1\0\1\115\1\13"+
    "\1\14\3\13\7\14\2\13\3\0\1\112\3\13\2\14"+
    "\1\0\4\13\2\156\1\203\2\0\2\13\2\204\20\156"+
    "\1\0\1\13\1\176\1\0\1\205\1\13\1\156\3\13"+
    "\7\156\2\13\3\0\1\203\3\13\2\156\1\0\3\13"+
    "\1\0\2\157\7\0\21\157\1\0\1\157\3\0\1\157"+
    "\2\0\1\206\7\157\11\0\2\157\4\0\1\13\2\14"+
    "\1\112\2\0\2\13\2\113\3\14\1\123\14\14\1\0"+
    "\1\13\1\114\1\0\1\115\1\13\1\14\3\13\7\14"+
    "\2\13\3\0\1\112\3\13\2\14\1\0\3\13\2\0"+
    "\1\163\22\0\1\163\46\0\1\165\12\0\1\134\7\0"+
    "\1\165\46\0\1\64\7\0\3\64\1\207\13\64\3\0"+
    "\1\64\2\0\2\64\3\0\7\64\11\0\2\64\6\0"+
    "\1\64\7\0\3\64\1\210\13\64\3\0\1\64\2\0"+
    "\2\64\3\0\7\64\11\0\2\64\6\0\1\64\7\0"+
    "\3\64\1\211\13\64\3\0\1\64\2\0\2\64\3\0"+
    "\7\64\11\0\2\64\6\0\1\64\7\0\7\64\1\166"+
    "\7\64\3\0\1\64\2\0\2\64\3\0\7\64\11\0"+
    "\2\64\6\0\1\64\7\0\6\64\1\207\10\64\3\0"+
    "\1\64\2\0\2\64\3\0\7\64\11\0\2\64\6\0"+
    "\1\64\7\0\11\64\1\143\5\64\3\0\1\64\2\0"+
    "\2\64\3\0\7\64\11\0\2\64\4\0\1\13\2\176"+
    "\1\203\2\0\2\13\2\204\20\176\1\0\1\13\1\176"+
    "\1\0\1\205\1\13\1\176\3\13\7\176\2\13\3\0"+
    "\1\203\3\13\2\176\1\0\4\13\2\14\1\112\2\0"+
    "\2\13\2\113\20\14\1\0\1\13\1\114\1\0\1\115"+
    "\1\13\1\14\3\13\1\212\6\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\2\14\1\213\15\14\1\0\1\13\1\114\1\0"+
    "\1\115\1\13\1\14\3\13\7\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\4\13\2\14\1\112\2\0\2\13"+
    "\2\113\2\14\1\214\15\14\1\0\1\13\1\114\1\0"+
    "\1\115\1\13\1\14\3\13\7\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\3\13\3\0\1\203\32\0\1\205"+
    "\21\0\1\203\11\0\3\13\1\203\2\0\24\13\1\0"+
    "\2\13\1\0\1\205\16\13\3\0\1\203\5\13\1\0"+
    "\3\13\2\0\1\64\7\0\17\64\3\0\1\64\2\0"+
    "\2\64\3\0\1\64\1\215\5\64\11\0\2\64\6\0"+
    "\1\64\7\0\4\64\1\216\12\64\3\0\1\64\2\0"+
    "\2\64\3\0\7\64\11\0\2\64\4\0\1\13\2\14"+
    "\1\112\2\0\2\13\2\113\20\14\1\0\1\13\1\114"+
    "\1\0\1\115\1\13\1\14\3\13\3\14\1\123\3\14"+
    "\2\13\3\0\1\112\3\13\2\14\1\0\4\13\2\14"+
    "\1\112\2\0\2\13\2\113\6\14\1\217\11\14\1\0"+
    "\1\13\1\114\1\0\1\115\1\13\1\14\3\13\7\14"+
    "\2\13\3\0\1\112\3\13\2\14\1\0\4\13\2\14"+
    "\1\112\2\0\2\13\2\113\11\14\1\152\6\14\1\0"+
    "\1\13\1\114\1\0\1\115\1\13\1\14\3\13\7\14"+
    "\2\13\3\0\1\112\3\13\2\14\1\0\3\13\2\0"+
    "\1\64\7\0\4\64\1\143\12\64\3\0\1\64\2\0"+
    "\2\64\3\0\7\64\11\0\2\64\6\0\1\64\7\0"+
    "\12\64\1\220\4\64\3\0\1\64\2\0\2\64\3\0"+
    "\7\64\11\0\2\64\4\0\1\13\2\14\1\112\2\0"+
    "\2\13\2\113\1\177\17\14\1\0\1\13\1\114\1\0"+
    "\1\115\1\13\1\14\3\13\7\14\2\13\3\0\1\112"+
    "\3\13\2\14\1\0\3\13\2\0\1\64\7\0\10\64"+
    "\1\221\6\64\3\0\1\64\2\0\2\64\3\0\7\64"+
    "\11\0\2\64\6\0\1\64\7\0\3\64\1\222\13\64"+
    "\3\0\1\64\2\0\2\64\3\0\7\64\11\0\2\64"+
    "\6\0\1\64\7\0\11\64\1\207\5\64\3\0\1\64"+
    "\2\0\2\64\3\0\7\64\11\0\2\64\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6148];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\7\0\1\1\1\0\12\1\3\11\5\1\1\11"+
    "\4\1\1\11\1\1\1\11\2\1\1\11\2\1\3\11"+
    "\1\1\2\11\1\1\2\11\11\1\1\11\3\1\5\11"+
    "\2\1\3\11\1\0\2\1\1\11\16\1\2\0\6\1"+
    "\1\0\3\1\1\0\13\1\1\0\16\1\1\0\1\1"+
    "\2\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int myPrevState = YYINITIAL;

    private boolean isOpenBrace = false;
    private boolean isOpenParentheses = false;

    public int yyprevstate() {
        return myPrevState;
    }

    private int popState(){
        final int prev = myPrevState;
        myPrevState = YYINITIAL;
        return prev;
    }

    protected void pushState(int state){
        myPrevState = state;
    }

    private boolean pushBackTo(String text){
        final int position = yytext().toString().indexOf(text);

        if( position != -1 ){
            yypushback(yylength() - position);
            return true;
        }

        return false;
    }

    private IElementType openBrace(){
        isOpenBrace = true;
        return xtplToken.BRACES;
    }

    private IElementType closeBrace(){
        isOpenBrace = false;
        return xtplToken.BRACES;
    }

    private IElementType openParentheses(){
        isOpenParentheses = true;
        return xtplToken.PARENTHESES;
    }

    private IElementType closeParentheses(){
        isOpenParentheses = false;
        return xtplToken.PARENTHESES;
    }


  xtplLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  xtplLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return closeBrace();
          }
        case 46: break;
        case 1: 
          { return xtplToken.TEXT;
          }
        case 47: break;
        case 4: 
          { return xtplToken.WHITE_SPACE;
          }
        case 48: break;
        case 8: 
          { return openBrace();
          }
        case 49: break;
        case 22: 
          { yypushback(1); yybegin(YYEXPR);
          }
        case 50: break;
        case 28: 
          { return xtplToken.VAR;
          }
        case 51: break;
        case 42: 
          { return xtplToken.KEYWORD;
          }
        case 52: break;
        case 15: 
          { return xtplToken.CTX;
          }
        case 53: break;
        case 44: 
          { yypushback(1); yybegin(YYXATTR_NAME); return xtplToken.XATTR_NAME;
          }
        case 54: break;
        case 26: 
          { if( !isOpenParentheses ){ yybegin(YYINITIAL); } return xtplToken.WHITE_SPACE;
          }
        case 55: break;
        case 37: 
          { return xtplToken.SCRIPT;
          }
        case 56: break;
        case 24: 
          { yybegin(YYINITIAL); return xtplToken.BRACES;
          }
        case 57: break;
        case 17: 
          { return xtplToken.ATTR_VALUE;
          }
        case 58: break;
        case 6: 
          { yypushback(1); yybegin(YYNODE_NAME);
          }
        case 59: break;
        case 43: 
          { return xtplToken.COMMENT;
          }
        case 60: break;
        case 12: 
          { return xtplToken.PARENTHESES;
          }
        case 61: break;
        case 35: 
          { yybegin(YYINITIAL); return xtplToken.OPERATION_SIGN;
          }
        case 62: break;
        case 39: 
          { yypushback(1); yybegin(YYATTR_NAME); return xtplToken.ATTR_NAME;
          }
        case 63: break;
        case 20: 
          { return xtplToken.ATTR_NAME;
          }
        case 64: break;
        case 2: 
          { return xtplToken.STRING;
          }
        case 65: break;
        case 19: 
          { return xtplToken.DOT;
          }
        case 66: break;
        case 18: 
          { yybegin(YYINITIAL); return xtplToken.WHITE_SPACE;
          }
        case 67: break;
        case 40: 
          { yybegin(YYEXPR); return xtplToken.KEYWORD;
          }
        case 68: break;
        case 13: 
          { yybegin(YY_SCRIPT); return xtplToken.SCRIPT;
          }
        case 69: break;
        case 3: 
          { yybegin(YYNODE_NAME); return  isOpenBrace ? xtplToken.NODE_OR_ATTR : xtplToken.NODE_NAME;
          }
        case 70: break;
        case 21: 
          { yybegin(YYNODE_NAME); return xtplToken.BRACES;
          }
        case 71: break;
        case 30: 
          { return xtplToken.BRACES;
          }
        case 72: break;
        case 45: 
          { return xtplToken.BOOL;
          }
        case 73: break;
        case 36: 
          { yybegin(YYEXPR); return xtplToken.STRING;
          }
        case 74: break;
        case 23: 
          { return xtplToken.COLON;
          }
        case 75: break;
        case 38: 
          { yybegin(YYINITIAL); return xtplToken.SCRIPT;
          }
        case 76: break;
        case 7: 
          { if( yystate() == YYINITIAL ){
        return xtplToken.BAD_CHARACTER;
    }
    else {
        yybegin(popState());
        yypushback(yylength());
    }
          }
        case 77: break;
        case 41: 
          { yybegin(YYDECL); return xtplToken.DECLARATION;
          }
        case 78: break;
        case 10: 
          { return xtplToken.SEMICOLON;
          }
        case 79: break;
        case 27: 
          { yybegin(YY_DQ_STRING); return xtplToken.STRING;
          }
        case 80: break;
        case 34: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 81: break;
        case 16: 
          { yybegin(YYNODE_ATTR); return xtplToken.BRACES;
          }
        case 82: break;
        case 32: 
          { return closeParentheses();
          }
        case 83: break;
        case 5: 
          { yypushback(1); yybegin(YYNODE_CLASS);
          }
        case 84: break;
        case 25: 
          { return xtplToken.NUMBER;
          }
        case 85: break;
        case 14: 
          { yybegin(YYNODE_CLASS); return xtplToken.DOT;
          }
        case 86: break;
        case 11: 
          { yybegin(YYEXPR); return xtplToken.DECLARATION;
          }
        case 87: break;
        case 33: 
          { return xtplToken.BRACKETS;
          }
        case 88: break;
        case 29: 
          { return xtplToken.OPERATION_SIGN;
          }
        case 89: break;
        case 31: 
          { return openParentheses();
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
