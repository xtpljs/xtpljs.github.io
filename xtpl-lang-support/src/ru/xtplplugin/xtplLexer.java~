/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ru.xtplplugin;
 
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.xtplplugin.psi.xtplToken;
import com.intellij.psi.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>xtpl.flex</tt>
 */
class xtplLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYNODE_NAME = 2;
  public static final int YYNODE_CLASS = 4;
  public static final int YYNODE_ATTR = 6;
  public static final int YYATTR_NAME = 8;
  public static final int YYXATTR_NAME = 10;
  public static final int YYEXPR = 12;
  public static final int YYEXPR_VALUE_SQ = 14;
  public static final int YYEXPR_VALUE_DQ = 16;
  public static final int YYDECL = 18;
  public static final int YYPROP = 20;
  public static final int YY_DQ_STRING = 22;
  public static final int YY_SCRIPT = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     6,  6,  7,  7,  6,  6,  8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\1\37\1\40\1\4\22\0\1\63\1\56\1\11"+
    "\1\41\1\44\1\56\1\42\1\10\1\64\1\65\1\56\1\33\1\6"+
    "\1\31\1\32\1\57\1\25\11\2\1\43\1\74\1\56\1\72\1\60"+
    "\1\56\1\62\6\30\21\45\1\27\2\45\1\71\1\7\1\73\1\0"+
    "\1\34\1\66\1\17\1\52\1\46\1\23\1\15\1\16\1\70\1\51"+
    "\1\24\2\70\1\20\1\70\1\22\1\47\1\53\1\70\1\13\1\21"+
    "\1\12\1\14\1\55\1\50\1\26\1\54\1\70\1\35\1\61\1\36"+
    "\1\56\6\0\1\37\32\0\1\67\11\0\1\1\12\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\24\1\1\0\123\1\1\0\213\1\10\0\246\1\1\0\46\1\2\0"+
    "\1\1\7\0\47\1\110\0\33\1\5\0\3\1\55\0\53\1\43\0"+
    "\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0"+
    "\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0"+
    "\1\1\30\0\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0"+
    "\1\1\11\0\1\1\3\0\1\1\27\0\31\1\107\0\25\1\117\0"+
    "\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\20\1\4\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0"+
    "\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\3\1\16\0"+
    "\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0\1\1\23\0"+
    "\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0\2\1\27\0"+
    "\1\1\13\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\64\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\20\1\3\0\1\1\32\0\3\1\5\0\2\1\43\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0"+
    "\1\1\1\0\2\1\17\0\2\1\22\0\10\1\1\0\3\1\1\0"+
    "\51\1\2\0\1\1\20\0\1\1\20\0\3\1\30\0\6\1\5\0"+
    "\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0"+
    "\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0"+
    "\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\4\1\40\0"+
    "\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0\53\1\24\0"+
    "\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0"+
    "\3\1\4\0\15\1\14\0\1\1\21\0\46\1\1\0\1\1\5\0"+
    "\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0"+
    "\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0\126\1\2\0"+
    "\6\1\3\0\u026c\1\2\0\21\1\1\67\32\1\5\0\113\1\6\0"+
    "\10\1\7\0\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0"+
    "\15\1\1\0\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0"+
    "\130\1\10\0\51\1\1\0\1\1\5\0\106\1\12\0\37\1\61\0"+
    "\36\1\2\0\5\1\13\0\54\1\4\0\32\1\66\0\27\1\11\0"+
    "\65\1\122\0\1\1\135\0\57\1\21\0\7\1\67\0\36\1\15\0"+
    "\2\1\12\0\54\1\32\0\44\1\51\0\3\1\12\0\44\1\153\0"+
    "\4\1\1\0\4\1\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0"+
    "\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0"+
    "\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0"+
    "\15\1\5\0\3\1\1\0\7\1\3\0\13\67\35\0\1\37\1\37"+
    "\5\0\1\67\57\0\1\67\21\0\1\1\15\0\1\1\20\0\15\1"+
    "\145\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1"+
    "\2\0\4\1\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0\57\1"+
    "\1\0\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1"+
    "\1\0\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1"+
    "\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d0\0\1\67"+
    "\4\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0\3\1"+
    "\1\0\132\1\1\0\4\1\5\0\51\1\3\0\136\1\21\0\33\1"+
    "\65\0\20\1\u0200\0\u19b6\1\112\0\u51d6\1\52\0\u048d\1\103\0\56\1"+
    "\2\0\u010d\1\3\0\20\1\12\0\2\1\24\0\57\1\20\0\37\1"+
    "\2\0\106\1\61\0\11\1\2\0\147\1\2\0\43\1\2\0\10\1"+
    "\77\0\13\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1"+
    "\16\0\62\1\76\0\6\1\3\0\1\1\1\0\1\1\14\0\34\1"+
    "\12\0\27\1\31\0\35\1\7\0\57\1\34\0\1\1\20\0\5\1"+
    "\1\0\12\1\12\0\5\1\1\0\51\1\27\0\3\1\1\0\10\1"+
    "\24\0\27\1\3\0\1\1\3\0\62\1\1\0\1\1\3\0\2\1"+
    "\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0\13\1"+
    "\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1"+
    "\1\0\7\1\1\0\53\1\1\0\12\1\12\0\163\1\35\0\u2ba4\1"+
    "\14\0\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1"+
    "\14\0\5\1\5\0\1\1\1\0\12\1\1\0\15\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1"+
    "\22\0\100\1\2\0\66\1\50\0\14\1\164\0\5\1\1\0\207\1"+
    "\44\0\32\1\6\0\32\1\13\0\131\1\3\0\6\1\2\0\6\1"+
    "\2\0\6\1\2\0\3\1\43\0\14\1\1\0\32\1\1\0\23\1"+
    "\1\0\2\1\1\0\17\1\2\0\16\1\42\0\173\1\u0185\0\35\1"+
    "\3\0\61\1\57\0\40\1\20\0\21\1\1\0\10\1\6\0\46\1"+
    "\12\0\36\1\2\0\44\1\4\0\10\1\60\0\236\1\142\0\50\1"+
    "\10\0\64\1\234\0\u0137\1\11\0\26\1\12\0\10\1\230\0\6\1"+
    "\2\0\1\1\1\0\54\1\1\0\2\1\3\0\1\1\2\0\27\1"+
    "\12\0\27\1\11\0\37\1\101\0\23\1\1\0\2\1\12\0\26\1"+
    "\12\0\32\1\106\0\70\1\6\0\2\1\100\0\1\1\17\0\4\1"+
    "\1\0\3\1\1\0\33\1\54\0\35\1\3\0\35\1\43\0\10\1"+
    "\1\0\34\1\33\0\66\1\12\0\26\1\12\0\23\1\15\0\22\1"+
    "\156\0\111\1\67\0\63\1\15\0\63\1\u0310\0\65\1\113\0\55\1"+
    "\40\0\31\1\32\0\44\1\51\0\43\1\3\0\1\1\14\0\60\1"+
    "\16\0\4\1\25\0\1\1\1\0\1\1\43\0\22\1\1\0\31\1"+
    "\124\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\12\1"+
    "\7\0\57\1\46\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"+
    "\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\14\0\5\1"+
    "\u011e\0\60\1\24\0\2\1\1\0\1\1\270\0\57\1\51\0\4\1"+
    "\44\0\60\1\24\0\1\1\73\0\53\1\125\0\32\1\u0186\0\100\1"+
    "\37\0\1\1\u01c0\0\71\1\u0507\0\u039a\1\346\0\304\1\u0abc\0\u042f\1"+
    "\u0fd1\0\u0247\1\u21b9\0\u0239\1\7\0\37\1\161\0\36\1\22\0\60\1"+
    "\20\0\4\1\37\0\25\1\5\0\23\1\u0370\0\105\1\13\0\1\1"+
    "\102\0\15\1\u4060\0\2\1\u0bfe\0\153\1\5\0\15\1\3\0\11\1"+
    "\7\0\12\1\u1766\0\125\1\1\0\107\1\1\0\2\1\2\0\1\1"+
    "\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1"+
    "\1\0\101\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\34\1"+
    "\1\0\4\1\1\0\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1"+
    "\2\0\31\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\10\1\u1034\0\305\1\u053b\0\4\1\1\0\33\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\12\1\1\0\21\1\5\0\3\1\1\0\5\1\1\0\21\1"+
    "\u1144\0\ua6d7\1\51\0\u1035\1\13\0\336\1\2\0\u1682\1\u295e\0\u021e\1"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final int ZZ_SX = 0x0700;
  private static final int ZZ_MX = 0x10000;
  private static final int ZZ_LX = 0x110000;
  private static char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_SX);
  private static class M { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_MX); }
  private static class L { static final char [] MAP = zzUnpackCMap(ZZ_CMAP_PACKED, ZZ_LX); }

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\5\0\1\3\1\0\1\1\1\4"+
    "\1\5\1\1\6\4\1\1\1\6\1\7\1\10\1\11"+
    "\1\1\1\12\2\4\1\1\1\13\1\12\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\12"+
    "\1\2\1\25\2\12\1\1\1\26\1\27\1\5\1\30"+
    "\1\31\1\32\1\33\1\34\6\35\1\32\2\36\1\37"+
    "\2\35\1\36\1\40\1\41\1\42\1\43\1\44\1\3"+
    "\1\12\1\45\1\46\1\47\1\4\1\0\2\1\1\50"+
    "\2\1\5\4\1\51\2\4\2\1\1\52\1\1\2\4"+
    "\2\1\1\16\1\22\2\0\1\25\1\0\1\3\3\0"+
    "\5\35\1\2\1\0\2\35\1\36\1\0\1\4\1\1"+
    "\6\4\1\0\1\1\4\52\2\4\1\53\2\0\1\32"+
    "\1\0\1\32\5\35\1\32\1\20\1\35\1\1\1\2"+
    "\4\4\1\0\1\1\1\54\1\0\1\1\1\52\1\0"+
    "\1\25\1\55\2\35\1\1\3\4\1\0\2\1\1\0"+
    "\1\1\1\50\2\25\2\35\1\4\2\0\3\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u0262"+
    "\0\u0501\0\u057b\0\u0501\0\u05b8\0\u05f5\0\u0632\0\u0501\0\u066f"+
    "\0\u06ac\0\u0262\0\u06e9\0\u0501\0\u0726\0\u0501\0\u0763\0\u07a0"+
    "\0\u0501\0\u07dd\0\u0501\0\u081a\0\u0857\0\u0894\0\u0501\0\u0501"+
    "\0\u0501\0\u08d1\0\u0501\0\u0501\0\u090e\0\u0501\0\u0501\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0501\0\u0b70\0\u0bad\0\u0bea\0\u0501\0\u0501\0\u0501\0\u0501"+
    "\0\u0501\0\u0c27\0\u0c64\0\u0501\0\u0501\0\u0501\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u053e\0\u0501\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u029f\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u066f\0\u1128\0\u1165\0\u07dd"+
    "\0\u11a2\0\u11df\0\u0894\0\u0857\0\u121c\0\u1259\0\u1296\0\u12d3"+
    "\0\u1310\0\u134d\0\u138a\0\u13c7\0\u0988\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u0c64\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u0262\0\u17d4"+
    "\0\u1811\0\u184e\0\u10eb\0\u188b\0\u18c8\0\u1905\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1404\0\u0988\0\u1ab0"+
    "\0\u1aed\0\u029f\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u0501\0\u1c98\0\u1cd5\0\u0501\0\u1d12\0\u1d4f\0\u0988\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u16e0\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\13\3\15\2\13\2\16\3\14\1\17"+
    "\1\20\2\14\1\21\1\14\1\22\1\23\1\13\1\24"+
    "\2\14\1\25\1\26\1\13\1\25\1\27\1\30\1\13"+
    "\1\15\1\31\1\32\1\33\1\13\1\14\1\34\3\14"+
    "\1\35\3\14\1\13\1\36\1\37\1\40\1\41\1\15"+
    "\2\42\1\43\1\13\1\14\1\33\3\13\3\33\3\15"+
    "\24\33\1\44\5\33\1\15\1\45\21\33\1\15\5\33"+
    "\1\46\4\33\1\47\1\33\3\50\4\33\13\47\1\33"+
    "\4\47\1\51\1\33\1\47\1\52\2\33\1\50\1\33"+
    "\1\53\2\33\11\47\5\33\1\50\4\33\1\47\1\46"+
    "\4\33\1\54\7\33\1\55\13\54\1\33\4\54\2\33"+
    "\1\54\1\56\7\33\11\54\12\33\1\54\1\33\1\57"+
    "\1\60\1\33\3\61\1\62\31\61\1\63\2\61\1\62"+
    "\2\61\1\64\17\61\1\62\11\61\2\33\1\65\1\62"+
    "\3\66\2\33\1\67\1\70\1\71\1\72\1\71\1\73"+
    "\3\71\1\74\1\71\1\75\1\76\3\71\1\77\1\51"+
    "\1\100\1\71\2\101\1\33\1\62\1\33\2\100\2\71"+
    "\1\102\6\71\1\103\1\100\1\104\2\100\1\33\1\62"+
    "\1\105\1\106\2\33\1\71\1\107\1\100\1\107\1\37"+
    "\75\33\3\61\1\62\31\61\1\110\2\61\1\62\22\61"+
    "\1\62\6\61\1\111\2\61\4\112\2\33\1\112\1\113"+
    "\1\112\1\114\63\112\66\115\1\116\6\115\3\13\3\0"+
    "\24\13\1\0\5\13\2\0\1\13\1\0\14\13\4\0"+
    "\5\13\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\13\14\1\117\4\14\1\0\1\13\1\25\1\122"+
    "\2\13\1\120\1\0\1\13\1\123\1\13\11\14\2\13"+
    "\3\0\1\120\4\13\1\14\1\0\3\13\3\0\3\15"+
    "\32\0\1\15\22\0\1\15\11\0\1\13\1\25\1\13"+
    "\3\0\4\13\13\25\1\13\1\124\3\25\1\0\1\13"+
    "\1\25\1\122\2\13\2\0\1\125\1\0\1\13\11\25"+
    "\2\13\4\0\4\13\1\25\1\0\4\13\1\14\1\117"+
    "\1\120\2\0\2\13\2\121\6\14\1\126\4\14\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\11\14\2\13\3\0\1\120\4\13"+
    "\1\14\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\13\14\1\117\4\14\1\0\1\13\1\25\1\122"+
    "\2\13\1\120\1\0\1\13\1\123\1\13\2\14\1\127"+
    "\6\14\2\13\3\0\1\120\4\13\1\14\1\0\4\13"+
    "\1\14\1\117\1\120\2\0\2\13\2\121\13\14\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\1\14\1\130\1\14\1\131\5\14"+
    "\2\13\3\0\1\120\4\13\1\14\1\0\4\13\1\14"+
    "\1\117\1\120\2\0\2\13\2\121\3\14\1\132\7\14"+
    "\1\117\4\14\1\0\1\13\1\25\1\122\2\13\1\120"+
    "\1\0\1\13\1\123\1\13\11\14\2\13\3\0\1\120"+
    "\4\13\1\14\1\0\4\13\1\14\1\117\1\120\2\0"+
    "\2\13\2\121\4\14\1\133\3\14\1\134\2\14\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\11\14\2\13\3\0\1\120\4\13"+
    "\1\14\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\13\14\1\117\3\14\1\135\1\0\1\13\1\25"+
    "\1\122\2\13\1\120\1\0\1\13\1\123\1\13\11\14"+
    "\2\13\3\0\1\120\4\13\1\14\1\0\4\13\1\25"+
    "\1\136\1\120\2\0\2\13\2\121\13\25\1\136\4\25"+
    "\1\0\1\13\1\25\1\122\2\13\1\120\1\0\1\13"+
    "\1\123\1\13\11\25\2\13\3\0\1\120\4\13\1\25"+
    "\1\0\3\13\75\0\3\13\3\0\24\13\1\0\2\13"+
    "\1\137\2\13\2\0\1\13\1\0\14\13\4\0\5\13"+
    "\1\0\4\13\1\140\1\13\3\0\4\13\13\140\1\13"+
    "\3\140\1\25\1\0\1\13\1\25\1\141\2\13\2\0"+
    "\1\13\1\0\1\13\11\140\2\13\4\0\4\13\1\140"+
    "\1\0\4\13\1\14\1\117\1\120\2\0\2\13\2\121"+
    "\5\14\1\142\5\14\1\117\4\14\1\0\1\13\1\25"+
    "\1\122\2\13\1\120\1\0\1\13\1\123\1\13\11\14"+
    "\2\13\3\0\1\120\4\13\1\14\1\0\4\13\1\14"+
    "\1\117\1\120\2\0\2\13\2\121\12\14\1\143\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\11\14\2\13\3\0\1\120\4\13"+
    "\1\14\1\0\6\13\3\0\24\13\1\0\5\13\2\0"+
    "\1\13\1\0\13\13\1\144\4\0\5\13\1\0\3\13"+
    "\5\145\1\0\67\145\63\41\1\0\11\41\2\13\1\43"+
    "\3\146\4\13\15\43\3\13\1\0\4\13\1\43\1\146"+
    "\1\0\1\13\1\0\2\13\10\43\2\13\3\0\1\146"+
    "\3\13\2\43\1\0\3\13\1\0\1\45\10\0\13\45"+
    "\1\0\4\45\2\0\1\45\10\0\11\45\12\0\1\45"+
    "\5\0\1\47\1\147\7\0\13\47\1\147\4\47\2\0"+
    "\1\47\1\150\7\0\11\47\12\0\1\47\7\0\3\50"+
    "\32\0\1\50\22\0\1\50\46\0\1\151\40\0\1\54"+
    "\1\152\7\0\13\54\1\152\4\54\2\0\1\54\1\153"+
    "\7\0\11\54\12\0\1\54\4\0\73\154\1\0\1\154"+
    "\35\0\1\155\42\0\1\62\34\0\1\62\22\0\1\62"+
    "\13\0\1\65\12\0\1\156\7\0\1\65\4\0\1\157"+
    "\44\0\1\71\7\0\1\71\1\160\15\71\3\0\1\71"+
    "\7\0\10\71\1\161\1\71\12\0\1\71\6\0\1\71"+
    "\7\0\17\71\3\0\1\71\7\0\12\71\12\0\1\71"+
    "\6\0\1\71\7\0\10\71\1\162\6\71\3\0\1\71"+
    "\7\0\12\71\12\0\1\71\6\0\1\71\7\0\5\71"+
    "\1\163\11\71\3\0\1\71\7\0\12\71\12\0\1\71"+
    "\6\0\1\71\7\0\2\71\1\164\14\71\3\0\1\71"+
    "\7\0\12\71\12\0\1\71\6\0\1\71\7\0\10\71"+
    "\1\165\6\71\3\0\1\71\7\0\12\71\12\0\1\71"+
    "\6\0\1\65\12\0\1\156\7\0\1\65\2\166\2\0"+
    "\1\157\44\0\1\65\22\0\1\65\3\0\1\100\1\0"+
    "\1\100\6\0\2\100\12\0\4\100\10\0\1\100\33\0"+
    "\1\100\1\0\1\100\6\0\2\100\12\0\4\100\10\0"+
    "\1\100\4\0\1\71\7\0\1\167\16\71\3\0\1\71"+
    "\7\0\12\71\12\0\1\71\6\0\1\71\7\0\17\71"+
    "\3\0\1\71\7\0\3\71\1\170\6\71\12\0\1\71"+
    "\35\0\1\100\1\0\1\100\6\0\2\100\12\0\1\100"+
    "\1\171\2\100\10\0\1\100\2\0\4\112\2\0\1\112"+
    "\1\172\1\112\1\0\67\112\2\0\67\112\1\13\2\117"+
    "\1\120\2\0\2\13\2\121\17\117\1\173\1\0\5\13"+
    "\1\120\1\0\1\13\1\123\1\13\11\117\2\13\3\0"+
    "\1\120\4\13\1\117\1\0\3\13\3\0\1\120\34\0"+
    "\1\120\2\0\1\123\17\0\1\120\11\0\3\13\1\120"+
    "\2\0\24\13\1\0\5\13\1\120\1\0\1\13\1\123"+
    "\14\13\3\0\1\120\5\13\1\0\4\13\1\25\1\136"+
    "\1\120\2\0\2\13\2\121\13\25\1\136\3\25\1\174"+
    "\1\0\1\13\1\25\1\122\2\13\1\120\1\0\1\13"+
    "\1\123\1\13\11\25\2\13\3\0\1\120\4\13\1\25"+
    "\1\0\4\13\1\25\1\13\3\0\4\13\13\25\1\13"+
    "\4\25\1\0\1\13\1\25\1\122\2\13\2\0\1\13"+
    "\1\0\1\13\11\25\2\13\4\0\4\13\1\25\1\0"+
    "\4\13\1\14\1\117\1\120\2\0\2\13\2\121\7\14"+
    "\1\175\3\14\1\117\4\14\1\0\1\13\1\25\1\122"+
    "\2\13\1\120\1\0\1\13\1\123\1\13\11\14\2\13"+
    "\3\0\1\120\4\13\1\14\1\0\4\13\1\14\1\117"+
    "\1\120\2\0\2\13\2\121\1\14\1\133\11\14\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\11\14\2\13\3\0\1\120\4\13"+
    "\1\14\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\13\14\1\117\4\14\1\0\1\13\1\25\1\122"+
    "\2\13\1\120\1\0\1\13\1\123\1\13\2\14\1\176"+
    "\6\14\2\13\3\0\1\120\4\13\1\14\1\0\4\13"+
    "\1\14\1\117\1\120\2\0\2\13\2\121\12\14\1\177"+
    "\1\117\4\14\1\0\1\13\1\25\1\122\2\13\1\120"+
    "\1\0\1\13\1\123\1\13\11\14\2\13\3\0\1\120"+
    "\4\13\1\14\1\0\4\13\1\14\1\117\1\120\2\0"+
    "\2\13\2\121\4\14\1\200\6\14\1\117\4\14\1\0"+
    "\1\13\1\25\1\122\2\13\1\120\1\0\1\13\1\123"+
    "\1\13\11\14\2\13\3\0\1\120\4\13\1\14\1\0"+
    "\4\13\1\14\1\117\1\120\2\0\2\13\2\121\13\14"+
    "\1\117\4\14\1\0\1\13\1\25\1\122\2\13\1\120"+
    "\1\0\1\13\1\123\1\13\1\14\1\201\7\14\2\13"+
    "\3\0\1\120\4\13\1\14\1\0\4\13\1\202\1\117"+
    "\1\120\2\0\2\13\2\121\13\202\1\117\3\202\1\14"+
    "\1\0\1\13\1\25\1\122\2\13\1\120\1\0\1\13"+
    "\1\123\1\13\11\202\2\13\3\0\1\120\4\13\1\202"+
    "\1\0\4\13\2\136\1\120\2\0\2\13\2\121\17\136"+
    "\1\13\1\0\5\13\1\120\1\0\1\13\1\123\1\13"+
    "\11\136\2\13\3\0\1\120\4\13\1\136\1\0\3\13"+
    "\3\137\1\203\2\0\24\137\1\203\3\137\1\204\1\13"+
    "\1\0\1\203\1\137\1\203\14\137\4\203\5\137\1\203"+
    "\3\137\1\13\1\140\1\205\1\120\2\0\2\13\2\121"+
    "\13\140\1\205\4\140\1\206\1\13\1\140\1\122\1\207"+
    "\1\13\1\120\1\0\1\13\1\123\1\13\11\140\2\13"+
    "\3\0\1\120\4\13\1\140\1\0\4\13\1\210\1\13"+
    "\3\0\4\13\13\210\1\13\3\210\1\13\1\0\2\13"+
    "\1\137\2\13\2\0\1\13\1\0\1\13\11\210\2\13"+
    "\4\0\4\13\1\210\1\0\4\13\1\14\1\117\1\120"+
    "\2\0\2\13\2\121\7\14\1\211\3\14\1\117\4\14"+
    "\1\0\1\13\1\25\1\122\2\13\1\120\1\0\1\13"+
    "\1\123\1\13\11\14\2\13\3\0\1\120\4\13\1\14"+
    "\1\0\4\13\1\14\1\117\1\120\2\0\2\13\2\121"+
    "\10\14\1\212\2\14\1\117\4\14\1\0\1\13\1\25"+
    "\1\122\2\13\1\120\1\0\1\13\1\123\1\13\11\14"+
    "\2\13\3\0\1\120\4\13\1\14\1\0\3\13\5\213"+
    "\1\0\67\213\2\0\4\146\4\0\15\146\10\0\2\146"+
    "\5\0\10\146\5\0\1\146\3\0\2\146\5\0\2\147"+
    "\7\0\17\147\14\0\11\147\12\0\1\147\4\0\36\214"+
    "\1\0\36\214\1\0\2\152\7\0\17\152\14\0\11\152"+
    "\12\0\1\152\4\0\4\155\2\0\30\155\1\215\2\0"+
    "\34\155\2\0\1\216\22\0\1\216\3\0\1\217\1\0"+
    "\1\217\43\0\1\220\22\0\1\220\51\0\1\71\7\0"+
    "\2\71\1\221\14\71\3\0\1\71\7\0\12\71\12\0"+
    "\1\71\6\0\1\71\7\0\17\71\3\0\1\71\7\0"+
    "\7\71\1\222\2\71\12\0\1\71\6\0\1\71\7\0"+
    "\11\71\1\223\5\71\3\0\1\71\7\0\12\71\12\0"+
    "\1\71\6\0\1\71\7\0\6\71\1\224\10\71\3\0"+
    "\1\71\7\0\12\71\12\0\1\71\6\0\1\71\7\0"+
    "\6\71\1\225\10\71\3\0\1\71\7\0\12\71\12\0"+
    "\1\71\6\0\1\226\12\0\3\226\3\0\1\226\1\0"+
    "\1\226\2\0\1\226\15\0\1\226\3\0\1\226\24\0"+
    "\1\71\7\0\14\71\1\227\2\71\3\0\1\71\7\0"+
    "\12\71\12\0\1\71\6\0\1\71\7\0\12\71\1\230"+
    "\4\71\3\0\1\71\7\0\12\71\12\0\1\71\4\0"+
    "\5\213\1\0\23\213\1\171\1\213\1\171\6\213\2\171"+
    "\12\213\4\171\10\213\1\171\2\213\1\13\2\173\3\0"+
    "\4\13\20\173\1\0\5\13\2\0\1\13\1\0\1\13"+
    "\11\173\2\13\4\0\4\13\1\173\1\0\4\13\1\231"+
    "\1\136\1\120\2\0\2\13\2\121\13\231\1\136\3\231"+
    "\1\25\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\11\231\2\13\3\0\1\120\4\13"+
    "\1\231\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\3\14\1\232\7\14\1\117\4\14\1\0\1\13"+
    "\1\25\1\122\2\13\1\120\1\0\1\13\1\123\1\13"+
    "\11\14\2\13\3\0\1\120\4\13\1\14\1\0\4\13"+
    "\1\14\1\117\1\120\2\0\2\13\2\121\13\14\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\6\14\1\211\2\14\2\13\3\0"+
    "\1\120\4\13\1\14\1\0\4\13\1\14\1\117\1\120"+
    "\2\0\2\13\2\121\1\233\12\14\1\117\4\14\1\0"+
    "\1\13\1\25\1\122\2\13\1\120\1\0\1\13\1\123"+
    "\1\13\11\14\2\13\3\0\1\120\4\13\1\14\1\0"+
    "\4\13\1\14\1\117\1\120\2\0\2\13\2\121\5\14"+
    "\1\234\5\14\1\117\4\14\1\0\1\13\1\25\1\122"+
    "\2\13\1\120\1\0\1\13\1\123\1\13\11\14\2\13"+
    "\3\0\1\120\4\13\1\14\1\0\4\13\1\14\1\117"+
    "\1\120\2\0\2\13\2\121\6\14\1\235\4\14\1\117"+
    "\4\14\1\0\1\13\1\25\1\122\2\13\1\120\1\0"+
    "\1\13\1\123\1\13\11\14\2\13\3\0\1\120\4\13"+
    "\1\14\1\0\4\13\1\202\1\236\1\237\2\0\2\13"+
    "\2\240\13\202\1\236\4\202\1\0\1\13\1\231\1\122"+
    "\2\13\1\237\1\0\1\13\1\241\1\13\11\202\2\13"+
    "\3\0\1\237\4\13\1\202\1\0\3\13\4\203\2\0"+
    "\30\203\1\242\2\0\34\203\3\137\1\203\2\0\24\137"+
    "\1\203\3\137\1\243\1\13\1\0\1\203\1\137\1\203"+
    "\14\137\4\203\5\137\1\203\3\137\1\13\2\205\1\120"+
    "\2\0\2\13\2\121\17\205\1\210\1\206\1\13\1\210"+
    "\1\13\1\207\1\13\1\120\1\0\1\13\1\123\1\13"+
    "\11\205\2\13\3\0\1\120\4\13\1\205\1\0\3\13"+
    "\1\0\2\206\7\0\21\206\1\0\1\206\1\0\1\244"+
    "\6\0\11\206\12\0\1\206\4\0\1\13\2\210\3\0"+
    "\4\13\20\210\1\206\1\13\1\210\1\13\1\207\1\13"+
    "\2\0\1\13\1\0\1\13\11\210\2\13\4\0\4\13"+
    "\1\210\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\3\14\1\133\7\14\1\117\4\14\1\0\1\13"+
    "\1\25\1\122\2\13\1\120\1\0\1\13\1\123\1\13"+
    "\11\14\2\13\3\0\1\120\4\13\1\14\1\0\4\13"+
    "\1\14\1\117\1\120\2\0\2\13\2\121\11\14\1\133"+
    "\1\14\1\117\4\14\1\0\1\13\1\25\1\122\2\13"+
    "\1\120\1\0\1\13\1\123\1\13\11\14\2\13\3\0"+
    "\1\120\4\13\1\14\1\0\3\13\36\214\1\245\36\214"+
    "\4\155\2\0\30\155\1\246\2\0\34\155\2\0\1\216"+
    "\22\0\1\216\51\0\1\220\12\0\1\156\7\0\1\220"+
    "\51\0\1\71\7\0\3\71\1\247\13\71\3\0\1\71"+
    "\7\0\12\71\12\0\1\71\6\0\1\71\7\0\3\71"+
    "\1\250\13\71\3\0\1\71\7\0\12\71\12\0\1\71"+
    "\6\0\1\71\7\0\3\71\1\251\13\71\3\0\1\71"+
    "\7\0\12\71\12\0\1\71\6\0\1\71\7\0\7\71"+
    "\1\221\7\71\3\0\1\71\7\0\12\71\12\0\1\71"+
    "\6\0\1\71\7\0\6\71\1\247\10\71\3\0\1\71"+
    "\7\0\12\71\12\0\1\71\6\0\1\71\7\0\11\71"+
    "\1\165\5\71\3\0\1\71\7\0\12\71\12\0\1\71"+
    "\4\0\1\13\1\231\1\252\1\237\2\0\2\13\2\240"+
    "\13\231\1\252\4\231\1\0\1\13\1\231\1\122\2\13"+
    "\1\237\1\0\1\13\1\241\1\13\11\231\2\13\3\0"+
    "\1\237\4\13\1\231\1\0\4\13\1\14\1\117\1\120"+
    "\2\0\2\13\2\121\13\14\1\117\4\14\1\0\1\13"+
    "\1\25\1\122\2\13\1\120\1\0\1\13\1\123\1\13"+
    "\1\14\1\253\7\14\2\13\3\0\1\120\4\13\1\14"+
    "\1\0\4\13\1\14\1\117\1\120\2\0\2\13\2\121"+
    "\2\14\1\254\10\14\1\117\4\14\1\0\1\13\1\25"+
    "\1\122\2\13\1\120\1\0\1\13\1\123\1\13\11\14"+
    "\2\13\3\0\1\120\4\13\1\14\1\0\4\13\1\14"+
    "\1\117\1\120\2\0\2\13\2\121\2\14\1\255\10\14"+
    "\1\117\4\14\1\0\1\13\1\25\1\122\2\13\1\120"+
    "\1\0\1\13\1\123\1\13\11\14\2\13\3\0\1\120"+
    "\4\13\1\14\1\0\4\13\2\236\1\237\2\0\2\13"+
    "\2\240\20\236\1\0\1\13\1\252\3\13\1\237\1\0"+
    "\1\13\1\241\1\13\11\236\2\13\3\0\1\237\4\13"+
    "\1\236\1\0\3\13\3\0\1\237\34\0\1\237\2\0"+
    "\1\241\17\0\1\237\11\0\3\13\1\237\2\0\24\13"+
    "\1\0\5\13\1\237\1\0\1\13\1\241\14\13\3\0"+
    "\1\237\5\13\1\0\3\13\4\203\2\0\30\203\1\256"+
    "\2\0\34\203\1\137\1\257\1\260\1\261\2\0\2\137"+
    "\2\262\13\257\1\260\4\257\1\203\1\137\1\257\1\137"+
    "\1\243\1\13\1\120\1\203\1\137\1\263\1\137\11\257"+
    "\2\137\3\203\1\261\4\137\1\257\1\203\3\137\36\0"+
    "\1\47\36\0\1\155\1\264\1\265\1\155\2\0\4\155"+
    "\13\264\1\265\4\264\2\155\1\264\1\155\1\246\2\0"+
    "\4\155\11\264\12\155\1\264\4\155\2\0\1\71\7\0"+
    "\17\71\3\0\1\71\7\0\3\71\1\266\6\71\12\0"+
    "\1\71\6\0\1\71\7\0\4\71\1\267\12\71\3\0"+
    "\1\71\7\0\12\71\12\0\1\71\4\0\1\13\2\252"+
    "\1\237\2\0\2\13\2\240\20\252\1\0\1\13\1\252"+
    "\3\13\1\237\1\0\1\13\1\241\1\13\11\252\2\13"+
    "\3\0\1\237\4\13\1\252\1\0\4\13\1\14\1\117"+
    "\1\120\2\0\2\13\2\121\13\14\1\117\4\14\1\0"+
    "\1\13\1\25\1\122\2\13\1\120\1\0\1\13\1\123"+
    "\1\13\4\14\1\133\4\14\2\13\3\0\1\120\4\13"+
    "\1\14\1\0\4\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\6\14\1\270\4\14\1\117\4\14\1\0\1\13"+
    "\1\25\1\122\2\13\1\120\1\0\1\13\1\123\1\13"+
    "\11\14\2\13\3\0\1\120\4\13\1\14\1\0\4\13"+
    "\1\14\1\117\1\120\2\0\2\13\2\121\11\14\1\175"+
    "\1\14\1\117\4\14\1\0\1\13\1\25\1\122\2\13"+
    "\1\120\1\0\1\13\1\123\1\13\11\14\2\13\3\0"+
    "\1\120\4\13\1\14\1\0\3\13\1\203\1\271\1\272"+
    "\1\261\2\0\2\203\2\261\13\271\1\272\4\271\2\203"+
    "\1\271\1\203\1\256\1\0\1\120\2\203\1\263\1\203"+
    "\11\271\5\203\1\261\4\203\1\271\4\203\1\137\1\257"+
    "\1\260\1\261\2\0\2\137\2\262\13\257\1\260\4\257"+
    "\1\203\1\137\1\257\1\137\1\204\1\13\1\120\1\203"+
    "\1\137\1\263\1\137\11\257\2\137\3\203\1\261\4\137"+
    "\1\257\1\203\4\137\2\260\1\261\2\0\2\137\2\262"+
    "\17\260\1\137\1\203\3\137\1\204\1\13\1\120\1\203"+
    "\1\137\1\263\1\137\11\260\2\137\3\203\1\261\4\137"+
    "\1\260\1\203\3\137\3\203\1\261\2\0\30\203\1\242"+
    "\1\0\1\120\2\203\1\263\17\203\1\261\11\203\3\137"+
    "\1\261\2\0\24\137\1\203\3\137\1\204\1\13\1\120"+
    "\1\203\1\137\1\263\14\137\3\203\1\261\5\137\1\203"+
    "\3\137\1\155\1\264\1\265\1\155\2\0\4\155\13\264"+
    "\1\265\4\264\2\155\1\264\1\155\1\215\2\0\4\155"+
    "\11\264\12\155\1\264\5\155\2\265\1\155\2\0\4\155"+
    "\17\265\5\155\1\215\2\0\4\155\11\265\12\155\1\265"+
    "\4\155\2\0\1\71\7\0\4\71\1\165\12\71\3\0"+
    "\1\71\7\0\12\71\12\0\1\71\6\0\1\71\7\0"+
    "\12\71\1\273\4\71\3\0\1\71\7\0\12\71\12\0"+
    "\1\71\4\0\1\13\1\14\1\117\1\120\2\0\2\13"+
    "\2\121\1\232\12\14\1\117\4\14\1\0\1\13\1\25"+
    "\1\122\2\13\1\120\1\0\1\13\1\123\1\13\11\14"+
    "\2\13\3\0\1\120\4\13\1\14\1\0\3\13\1\203"+
    "\1\271\1\272\1\261\2\0\2\203\2\261\13\271\1\272"+
    "\4\271\2\203\1\271\1\203\1\242\1\0\1\120\2\203"+
    "\1\263\1\203\11\271\5\203\1\261\4\203\1\271\5\203"+
    "\2\272\1\261\2\0\2\203\2\261\17\272\5\203\1\242"+
    "\1\0\1\120\2\203\1\263\1\203\11\272\5\203\1\261"+
    "\4\203\1\272\4\203\2\0\1\71\7\0\10\71\1\274"+
    "\6\71\3\0\1\71\7\0\12\71\12\0\1\71\6\0"+
    "\1\71\7\0\3\71\1\275\13\71\3\0\1\71\7\0"+
    "\12\71\12\0\1\71\6\0\1\71\7\0\11\71\1\247"+
    "\5\71\3\0\1\71\7\0\12\71\12\0\1\71\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8845];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\5\0\1\1\1\0\13\1\1\11"+
    "\2\1\1\11\1\1\1\11\3\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\3\1\3\11"+
    "\1\1\2\11\1\1\2\11\11\1\1\11\3\1\5\11"+
    "\2\1\3\11\1\1\1\0\2\1\1\11\24\1\2\0"+
    "\1\1\1\0\1\1\3\0\6\1\1\0\3\1\1\0"+
    "\10\1\1\0\10\1\2\0\1\1\1\0\17\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\1\0\10\1\1\0"+
    "\2\1\1\0\7\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int myPrevState = YYINITIAL;

    private boolean isOpenBrace = false;
    private boolean isOpenParentheses = false;

    public int yyprevstate() {
        return myPrevState;
    }

    private int popState(){
        final int prev = myPrevState;
        myPrevState = YYINITIAL;
        return prev;
    }

    protected void pushState(int state){
        myPrevState = state;
    }

    private boolean pushBackTo(String text){
        final int position = yytext().toString().indexOf(text);

        if( position != -1 ){
            yypushback(yylength() - position);
            return true;
        }

        return false;
    }

    private IElementType openBrace(){
        isOpenBrace = true;
        return xtplToken.BRACES;
    }

    private IElementType closeBrace(){
        isOpenBrace = false;
        return xtplToken.BRACES;
    }

    private IElementType openParentheses(){
        isOpenParentheses = true;
        return xtplToken.PARENTHESES;
    }

    private IElementType closeParentheses(){
        isOpenParentheses = false;
        return xtplToken.PARENTHESES;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  xtplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed, int limit) {
    char [] map = new char[limit];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2410 && j < limit) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0 && j < limit);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          if (zzInput >= zzCMapL.length) ZZ_CMAP = zzCMapL = zzInput >= ZZ_MX ? L.MAP : M.MAP;
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return xtplToken.TEXT;
            }
          case 46: break;
          case 2: 
            { return xtplToken.KEYWORD;
            }
          case 47: break;
          case 3: 
            { return xtplToken.STRING;
            }
          case 48: break;
          case 4: 
            { yybegin(YYNODE_NAME); return  isOpenBrace ? xtplToken.NODE_OR_ATTR : xtplToken.NODE_NAME;
            }
          case 49: break;
          case 5: 
            { return xtplToken.WHITE_SPACE;
            }
          case 50: break;
          case 6: 
            { yypushback(1); yybegin(YYNODE_CLASS);
            }
          case 51: break;
          case 7: 
            { return openBrace();
            }
          case 52: break;
          case 8: 
            { return closeBrace();
            }
          case 53: break;
          case 9: 
            { yypushback(1); yybegin(YYNODE_NAME);
            }
          case 54: break;
          case 10: 
            { if( yystate() == YYINITIAL ){
        return xtplToken.BAD_CHARACTER;
    }
    else {
        yybegin(popState());
        yypushback(yylength());
    }
            }
          case 55: break;
          case 11: 
            { return xtplToken.SEMICOLON;
            }
          case 56: break;
          case 12: 
            { yybegin(YYEXPR); return xtplToken.DECLARATION;
            }
          case 57: break;
          case 13: 
            { return xtplToken.PARENTHESES;
            }
          case 58: break;
          case 14: 
            { yybegin(YY_SCRIPT); return xtplToken.SCRIPT;
            }
          case 59: break;
          case 15: 
            { yybegin(YYNODE_CLASS); return xtplToken.DOT;
            }
          case 60: break;
          case 16: 
            { return xtplToken.CTX;
            }
          case 61: break;
          case 17: 
            { yybegin(YYNODE_ATTR); return xtplToken.BRACES;
            }
          case 62: break;
          case 18: 
            { return xtplToken.ATTR_VALUE;
            }
          case 63: break;
          case 19: 
            { yybegin(YYINITIAL); return xtplToken.WHITE_SPACE;
            }
          case 64: break;
          case 20: 
            { return xtplToken.DOT;
            }
          case 65: break;
          case 21: 
            { return xtplToken.ATTR_NAME;
            }
          case 66: break;
          case 22: 
            { yybegin(YYNODE_NAME); return xtplToken.BRACES;
            }
          case 67: break;
          case 23: 
            { yypushback(1); yybegin(YYEXPR);
            }
          case 68: break;
          case 24: 
            { yybegin(YYINITIAL); return xtplToken.BRACES;
            }
          case 69: break;
          case 25: 
            { return xtplToken.COLON;
            }
          case 70: break;
          case 26: 
            { return xtplToken.NUMBER;
            }
          case 71: break;
          case 27: 
            { if( !isOpenParentheses ){ yybegin(YYINITIAL); } return xtplToken.WHITE_SPACE;
            }
          case 72: break;
          case 28: 
            { yybegin(YY_DQ_STRING); return xtplToken.STRING;
            }
          case 73: break;
          case 29: 
            { return xtplToken.VAR;
            }
          case 74: break;
          case 30: 
            { return xtplToken.OPERATION_SIGN;
            }
          case 75: break;
          case 31: 
            { return xtplToken.BRACES;
            }
          case 76: break;
          case 32: 
            { return openParentheses();
            }
          case 77: break;
          case 33: 
            { return closeParentheses();
            }
          case 78: break;
          case 34: 
            { return xtplToken.BRACKETS;
            }
          case 79: break;
          case 35: 
            { yypushback(1); yybegin(YYINITIAL);
            }
          case 80: break;
          case 36: 
            { yybegin(YYINITIAL); return xtplToken.OPERATION_SIGN;
            }
          case 81: break;
          case 37: 
            { yybegin(YYEXPR); return xtplToken.STRING;
            }
          case 82: break;
          case 38: 
            { return xtplToken.SCRIPT;
            }
          case 83: break;
          case 39: 
            { yybegin(YYINITIAL); return xtplToken.SCRIPT;
            }
          case 84: break;
          case 40: 
            { yypushback(1); yybegin(YYATTR_NAME); return xtplToken.ATTR_NAME;
            }
          case 85: break;
          case 41: 
            { yybegin(YYEXPR); return xtplToken.KEYWORD;
            }
          case 86: break;
          case 42: 
            { yybegin(YYDECL); return xtplToken.DECLARATION;
            }
          case 87: break;
          case 43: 
            { return xtplToken.COMMENT;
            }
          case 88: break;
          case 44: 
            { yypushback(1); yybegin(YYXATTR_NAME); return xtplToken.XATTR_NAME;
            }
          case 89: break;
          case 45: 
            { return xtplToken.BOOL;
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
